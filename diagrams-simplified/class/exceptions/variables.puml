abstract class "Symbol" as CLASS_SYMBOLE {
    # id: int
    # numLineDetection : int
    # numCharDetection : int
    + Symbol(int id)
    + operator int() const: int
    + {abstract} toString() const: string
    + {abstract} isPersistent() const: bool
    + {abstract} execute(map<string, StructVar*>& dicoVariables): void
    + {abstract} check(map<string, StructVar*>& dicoVariables): void
    + {abstract} optimize(map<string, StructVar*>& dicoVariables): Symbol*
    + {abstract} setSymbolDetectionPosition(int numLine, int numChar): void
}

abstract class "SymbolInstruction" as CLASS_SYMBOLE_INSTRUCTION extends CLASS_SYMBOLE {
    + SymbolInstruction(enum symbolIdTable idSymbol)
    + {abstract} affectExpression(SymbolExpression * expression): void
}

class "SymbolInstructionRead" as CLASS_SYMBOLE_INSTRUCTION_VAR_LECTURE extends CLASS_SYMBOLE_INSTRUCTION {
    + SymbolInstructionRead()
    + execute(map<string, StructVar*>& dicoVariables): void
    + {static} analyse(std::string & stringToAnalyse, std::string & stringSymbolDetected): Symbol *
    + affectExpression(SymbolExpression * expression): void
    + check(map<string, StructVar*>& dicoVariables): void
    + toString() const: string
}

'' Exceptions ------------------------------------------------
class "Error" as CLASS_ERROR {
    - number: int
    - level: int
    - numLineError: int
    - numCharError: int

    + Error(int number, int level, int numLineError, int numCharError)
    + what() const: const char*
    + toString() const: string
    + toString(int linePos, int charPos) const: string
}

class "ErrorArgument" as CLASS_ERROR_ARGUMENT {
    + ErrorArgument()
    + toString() const: string
}

class "ErrorComposite" as CLASS_ERROR_COMPOSITE extends CLASS_ERROR {
    - components: list<Error*>

    + ErrorComposite()
    + addError(Error *error): void
    + toString() const: string
    # toStringDetails() const: string
}

class "ErrorLexical" AS CLASS_ERROR_LEXICAL extends CLASS_ERROR {
    + ErrorLexical(int number, int level, int numLineError, int numCharError)

}

class "ErrorSemantic" AS CLASS_ERROR_SEMANTIC extends CLASS_ERROR {
    + ErrorSemantic(int number, int level, int numLineError, int numCharError)

}

class "ErrorLexicalMissingSymbol" as CLASS_ERROR_MISSING_LEXICAL_SYMBOL extends CLASS_ERROR_LEXICAL {
    + ErrorLexicalMissingSymbol(int numLine, int numChar, Symbol * missingSymbol)
    + toString() const: string
    # toStringDetails() const: string
}

class "ErrorLexicalUnexpectedSymbol" as CLASS_ERROR_LEXICAL_UNEXPECTED_SYMBOL extends CLASS_ERROR_LEXICAL {
    # symbolName: string
    # isIgnored: bool

    + ErrorLexicalUnexpectedSymbol(const string & symbolName, int numLine, int numChar)
    + ErrorLexicalUnexpectedSymbol(const string & symbolName, int numLine, int numChar, Symbol* expectedSymbol)
    + ErrorLexicalUnexpectedSymbol(const string & symbolName, int numLine, int numChar, bool ignoreSymbol)
    + isSymbolIgnored() const: bool
    # toStringDetails() const: string
}

class "ErrorLexicalUnknownSymbol" as CLASS_ERROR_LEXICAL_UNKNOWN_SYMBOL extends CLASS_ERROR_LEXICAL {
    # symbolName: string

    + ErrorLexicalUnknownSymbol(string symbolName, int numLineError, int numCharError)
    # toStringDetails() const: string
}

class "ErrorSemanticIncorrectNumericValue" as CLASS_ERROR_SEMANTIC_INCORRECT_NUMERIC_VALUE extends CLASS_ERROR_SEMANTIC {
    + ErrorSemanticIncorrectNumericValue(SymbolInstructionRead * instructionRead)
    # toStringDetails() const: string
}

class "ErrorSemanticVar" as CLASS_ERROR_SEMANTIC_VAR extends CLASS_ERROR_SEMANTIC {
    # varName : string

    + ErrorSemanticVar(int number, int level, const string & varName, int lineError, int charError)
    # toStringDetails() const: string
}

class "ErrorSemanticVarAlreadyDeclared" as CLASS_ERROR_SEMANTIC_VAR_ALREADY_DECLARED extends CLASS_ERROR_SEMANTIC_VAR {
    # isConstant : bool

    + ErrorSemanticVarAlreadyDeclared(const string &varName, bool constant, int lineError, int charError)
    # toStringDetails() const: string
}

class "ErrorSemanticVarIsConst" as CLASS_ERROR_SEMANTIC_VAR_IS_CONST extends CLASS_ERROR_SEMANTIC_VAR {
    + ErrorSemanticVarIsConst(const string &varName, int lineError, int charError)
    # toStringDetails() const: string
}

class "ErrorSemanticVarNotDeclared" as CLASS_ERROR_SEMANTIC_VAR_NOT_DECLARED extends CLASS_ERROR_SEMANTIC_VAR {
    + ErrorSemanticVarNotDeclared(const string &varName, int lineError, int charError)
    # toStringDetails() const: string
}

class "ErrorSemanticVarNotInitialized" as CLASS_ERROR_SEMANTIC_VAR_NOT_INITIALIZED extends CLASS_ERROR_SEMANTIC_VAR {
    + ErrorSemanticVarNotInitialized(const string &varName, int lineError, int charError)
    # toStringDetails() const: string
}

class "ErrorSemanticVarNotUsed" as CLASS_ERROR_SEMANTIC_VAR_NOT_USED extends CLASS_ERROR_SEMANTIC_VAR {
    - varName: string
    - isNotInitialized: bool

    + ErrorSemanticVarNotUsed(const string &varName, bool notInitialized)
    # toStringDetails() const: string
}

